"""
Content search panel UI components.

This module contains UI elements for content searching within selected files.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import logging

class ContentSearchPanel:
    """
    Panel for searching content within selected files.
    """
    
    def __init__(self, parent, callbacks):
        """
        Initialize the content search panel.
        
        Args:
            parent: Parent frame/widget
            callbacks: Dictionary of callback functions
        """
        self.parent = parent
        self.callbacks = callbacks
        
        # Initialize state variables first to avoid reference issues
        self.selection_status_var = tk.StringVar(value="No files selected")
        self.content_search_active = False
        self.content_keywords = tk.StringVar()
        self.content_case_sensitive = tk.BooleanVar(value=False)
        
        # Create main frame (initially not packed)
        self.frame = ttk.LabelFrame(parent, text="Content Search (after finding files)", padding="10")
        
        # Create UI components
        self._create_ui_components()

    def _create_ui_components(self):
        """Create all UI components in the correct order."""
        self._create_keywords_section()
        self._create_controls_section()
        self._create_search_button()
    
    def _create_keywords_section(self):
        """
        Create the keywords input section.
        """
        content_keywords_options_frame = ttk.Frame(self.frame)
        content_keywords_options_frame.pack(fill=tk.X, pady=5)
        
        # Keywords input
        content_keywords_frame = ttk.Frame(content_keywords_options_frame)
        content_keywords_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Label(content_keywords_frame, text="Content Keywords (CSV):").pack(side=tk.LEFT, padx=5)
        
        content_entry = ttk.Entry(
            content_keywords_frame, 
            textvariable=self.content_keywords, 
            width=40
        )
        content_entry.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Case sensitivity
        content_case_checkbox = ttk.Checkbutton(
            content_keywords_options_frame, 
            text="Case Sensitive", 
            variable=self.content_case_sensitive
        )
        content_case_checkbox.pack(side=tk.LEFT, padx=10)
    
    def _create_controls_section(self):
        """
        Create the control buttons and status section.
        """
        content_button_frame = ttk.Frame(self.frame)
        content_button_frame.pack(fill=tk.X, pady=5)
        
        # Refresh selection button
        ttk.Button(
            content_button_frame, 
            text="Refresh Selection", 
            command=self.force_enable_content_search
        ).pack(side=tk.LEFT, padx=5)
        
        # Selection status
        ttk.Label(
            content_button_frame, 
            textvariable=self.selection_status_var
        ).pack(side=tk.RIGHT, padx=5)
    
    def _create_search_button(self):
        """
        Create the main content search button.
        """
        # Content search button with accent style
        self.content_search_btn = ttk.Button(
            self.frame, 
            text="Search Selected File Contents", 
            command=self._search_file_contents,
            style="Accent.TButton"  # Uses the accent button style
        )
        self.content_search_btn.pack(pady=5, padx=5, fill=tk.X)
        self.content_search_btn.configure(state=tk.DISABLED)  # Disabled until files are selected
    
    def show(self, after_widget=None):
        """
        Show the content search panel.
        
        Args:
            after_widget: Widget to place this panel after
        """
        if after_widget:
            try:
                self.frame.pack(in_=self.frame.master, fill=tk.X, padx=5, pady=5, after=after_widget)
            except (KeyError, tk.TclError):
                # If error finding the widget, pack at the end
                self.frame.pack(fill=tk.X, padx=5, pady=5)
        else:
            self.frame.pack(fill=tk.X, padx=5, pady=5)
    
    def hide(self):
        """
        Hide the content search panel.
        """
        self.frame.pack_forget()
    
    def update_selection_status(self, selected_items):
        """
        Update the selection status and content search button state.
        
        Args:
            selected_items: List of selected treeview items
        """
        if selected_items:
            # Enable search button if files are selected
            self.content_search_btn.configure(state=tk.NORMAL)
            
            # Update selection status
            count = len(selected_items)
            self.selection_status_var.set(f"{count} files selected")
            
            # Update status if callback provided
            if 'update_status' in self.callbacks:
                self.callbacks['update_status'](f"{count} files selected. Ready for content search.")
        else:
            # Disable search button if no files selected
            self.content_search_btn.configure(state=tk.DISABLED)
            
            # Update selection status
            self.selection_status_var.set("No files selected")
            
            # Update status if callback provided
            if 'update_status' in self.callbacks:
                self.callbacks['update_status']("Select files to search their contents.")
    
    def force_enable_content_search(self):
        """
        Force-enable the content search button if files are selected.
        """
        if 'get_selected_files' in self.callbacks:
            selected_files = self.callbacks['get_selected_files']()
            
            if selected_files:
                # Enable search button
                self.content_search_btn.configure(state=tk.NORMAL)
                
                # Update selection status
                count = len(selected_files)
                self.selection_status_var.set(f"{count} files selected")
                
                # Update status if callback provided
                if 'update_status' in self.callbacks:
                    self.callbacks['update_status'](f"{count} files selected. Ready for content search.")
                
                # Show success message
                messagebox.showinfo(
                    "Selection Refreshed", 
                    f"{count} files are now selected and ready for content search."
                )
                
                # Scroll to search button
                self.content_search_btn.update()
                self.content_search_btn.focus_set()
            else:
                # Disable search button
                self.content_search_btn.configure(state=tk.DISABLED)
                
                # Update selection status
                self.selection_status_var.set("No files selected")
                
                # Update status if callback provided
                if 'update_status' in self.callbacks:
                    self.callbacks['update_status']("Please select files first.")
                
                # Show warning
                messagebox.showwarning(
                    "No Selection", 
                    "No files are selected. Please select files from the results table first."
                )
    
    def _search_file_contents(self):
        """
        Initiate content search for the selected files.
        """
        # Check if search is already running
        if self.content_search_active:
            messagebox.showwarning("Search in Progress", "A content search is already running.")
            return
        
        # Check file selection
        if 'get_selected_files' not in self.callbacks:
            return
            
        selected_files = self.callbacks['get_selected_files']()
        if not selected_files:
            messagebox.showinfo("No Selection", "Please select files from the results to search within.")
            return
        
        # Get search keywords
        content_kws_str = self.content_keywords.get()
        keywords = [kw.strip() for kw in content_kws_str.split(',') if kw.strip()]
        
        if not keywords:
            messagebox.showinfo("No Keywords", "Please enter content keywords to search for.")
            return
        
        # Get case sensitivity
        case_sensitive = self.content_case_sensitive.get()
        
        # Trigger search callback
        if 'on_content_search' in self.callbacks:
            self.callbacks['on_content_search'](selected_files, keywords, case_sensitive)
    
    def set_search_button_state(self, enable=True):
        """
        Enable or disable the content search button.
        
        Args:
            enable: True to enable, False to disable
        """
        self.content_search_btn.configure(state=tk.NORMAL if enable else tk.DISABLED)
        self.content_search_active = not enable
